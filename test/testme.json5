{
    /*
        Enable or disable tests in this directory
        Set to false to disable all tests in this directory
     */
    enable: true,

    /*
        Minimum depth required to run tests in this directory (default: 0)
        Use tm --depth N to run tests with depth <= N
     */
    depth: 0,

    /*
         Compiler configuration for different languages
     */
    compiler: {
        c: {
            // Compiler selection has three modes (same as documented above)
            compiler: {
                windows: 'msvc',
                macosx: 'clang',
                linux: 'gcc',
            },

            /*
                GCC-specific flags (Unix/Linux/MinGW)
                Default flags are automatically added: -std=c99 -Wall -Wextra -Wno-unused-parameter -Wno-strict-prototypes -O0 -g -I. -I~/.local/include -L~/.local/lib -I/opt/homebrew/include -L/opt/homebrew/lib
             */
            gcc: {
                flags: ['-I../src/modules/c'],
                libraries: ['m', 'pthread'],
            },

            /*
                Clang-specific flags (macOS/Unix)
                Default flags are automatically added: -std=c99 -Wall -Wextra -Wno-unused-parameter -Wno-strict-prototypes -O0 -g -I. -I~/.local/include -L~/.local/lib -I/opt/homebrew/include -L/opt/homebrew/lib
            */
            clang: {
                flags: ['-I../src/modules/c'],
                libraries: ['m', 'pthread'],
            },

            /*
                MSVC-specific flags (Windows)
                Default flags are automatically added: /std:c11 /W4 /Od /Zi /nologo
            */
            msvc: {
                flags: ['/I.', '/I../src/modules/c'],
                libraries: [],
            },
        },
        es: {
            require: 'testme',
        },
    },

    // Debugger configuration for different languages (use with --debug flag)
    debug: {
        // C debugger: xcode, lldb, gdb, vs, vscode, or path to executable
        c: {
            macosx: 'xcode',
            linux: 'gdb',
            windows: 'vs',
        },

        // JavaScript debugger: vscode, or path to executable
        // js: 'vscode',

        // TypeScript debugger: vscode, or path to executable
        // ts: 'vscode',

        // Python debugger: vscode, pdb, or path to executable
        // py: 'vscode',

        // Go debugger: vscode, delve, or path to executable
        // go: 'delve',
    },

    // Test execution settings
    execution: {
        timeout: 30, // Timeout per test in seconds
        parallel: true, // Run tests in parallel
        workers: 4, // Number of parallel workers
    },

    // Output formatting options
    output: {
        verbose: false, // Show detailed output
        format: 'simple', // Output format: simple, detailed, json
        colors: true, // Enable colored output
    },

    // File discovery patterns
    patterns: {
        // Base patterns applied to all platforms
        include: ['**/*.tst.c', '**/*.tst.js', '**/*.tst.ts', '**/*.tst.es'],
        exclude: ['**/node_modules/**', '**/.testme/**', '**/.*/**'],

        // Windows-specific patterns (added to base patterns on Windows)
        windows: {
            include: ['**/*.tst.ps1', '**/*.tst.bat', '**/*.tst.cmd'],
        },

        // macOS-specific patterns (added to base patterns on macOS)
        macosx: {
            include: ['**/*.tst.sh'],
        },

        // Linux-specific patterns (added to base patterns on Linux)
        linux: {
            include: ['**/*.tst.sh'],
        },
    },

    // Service management for test setup/teardown
    services: {
        skip: '', // Script to check if tests should be skipped (0=run, non-zero=skip)
        environment: '', // Script to emit environment variables (key=value lines)
        globalPrep: '', // Script to run once before all test groups (global setup)
        prep: '', // Script to run once before tests in this group begin (waits for completion)
        setup: '', // Script to start background service during test execution
        cleanup: '', // Script to run after tests in this group complete
        globalCleanup: '', // Script to run once after all test groups (global teardown)
        skipTimeout: 30, // Skip script timeout in seconds
        environmentTimeout: 30, // Environment script timeout in seconds
        globalPrepTimeout: 30, // Global prep timeout in seconds
        prepTimeout: 30, // Prep timeout in seconds
        setupTimeout: 30, // Setup timeout in seconds
        cleanupTimeout: 10, // Cleanup timeout in seconds
        globalCleanupTimeout: 10, // Global cleanup timeout in seconds
        setupDelay: 1, // Delay in seconds after setup starts before running tests (default: 1)
        shutdownTimeout: 0, // Wait time in seconds for graceful shutdown before SIGKILL (default: 0)
    },

    // Environment variables to set for test execution
    environment: {
        BIN: '${../build/${PLATFORM}-${PROFILE}/bin}',
        HTTP: 'http://localhost:4100',
    },
}
